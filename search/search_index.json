{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1: Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Projectile motion is a type of two-dimensional motion where an object is launched into the air with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) relative to the horizontal. The motion can be analyzed by breaking it into horizontal (x) and vertical (y) components. 1.1 Equations of Motion The horizontal and vertical components of the initial velocity are: \\[v_{0x} = v_0 \\cos(\\theta)\\] \\[v_{0y} = v_0 \\sin(\\theta)\\] Using the kinematic equations, the motion in each direction is governed by: Horizontal motion (constant velocity, no acceleration in the ideal case): \\[x = v_{0x} t = v_0 \\cos(\\theta) t\\] Vertical motion (accelerated due to gravity): \\[y = v_{0y} t - \\frac{1}{2} g t^2\\] where: \\(g\\) is the acceleration due to gravity \\((9.81 \\text{ m/s}^2)\\) \\(t\\) is the time of flight. 1.2 Time of Flight The time of flight is determined by solving for when the projectile returns to the ground \\((y = 0)\\) : \\( \\(t = \\frac{2 v_0 \\sin(\\theta)}{g}\\) \\) 1.3 Range Equation The range \\( \\(R\\) \\) is the horizontal distance traveled when the projectile lands: \\( \\(R = v_{0x} \\cdot t = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g}\\) \\) Using the identity \\( \\(2 \\sin(\\theta) \\cos(\\theta) = \\sin(2\\theta)\\) \\) , we get: \\( \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) \\) 2. Analysis of the Range The range is maximized when \\( \\(\\sin(2\\theta) = 1\\) \\) , which occurs at \\( \\(2\\theta = 90^\\circ\\) \\) , or \\( \\(\\theta = 45^\\circ\\) \\) . If the initial velocity \\( \\(v_0\\) \\) increases, the range increases quadratically. If gravity \\( \\(g\\) \\) increases (e.g., on another planet), the range decreases. 3. Practical Applications Sports: Understanding projectile motion is crucial in games like soccer, basketball, and golf. Engineering: Used in ballistics, rocketry, and artillery targeting systems. Real-World Effects: Air resistance, wind, and uneven terrain can significantly alter the theoretical range. 4. Implementation: Python Simulation The following Python script simulates projectile motion and plots the range as a function of the angle of projection. import numpy as np import matplotlib.pyplot as plt def projectile_range(v0=20, g=9.81): angles = np.linspace(0, 90, 100) angles_rad = np.radians(angles) ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=f'v\u2080 = {v0} m/s') max_range = (v0**2 * np.sin(np.radians(90))) / g plt.plot(45, max_range, 'ro') plt.annotate(f'Max: {max_range:.1f} m', xy=(45, max_range), xytext=(50, max_range + 5), arrowprops=dict(arrowstyle=\"->\")) plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle (v\u2080 = 20 m/s)\") plt.legend() plt.grid(True) plt.tight_layout() plt.show() projectile_range() Figure 1: Horizontal range vs. launch angle for a projectile with v\u2080 = 20 m/s. Maximum range occurs at 45\u00b0. Explanation of the Graph This graph illustrates how the horizontal range of a projectile depends on the launch angle for different initial velocities ( \\( v_0 \\) ). Each curve represents a different initial velocity. The maximum range occurs at 45\u00b0 . As the initial velocity increases, the range increases quadratically ( \\( v_0^2 \\) ) . Lower initial velocities result in shorter ranges, while higher velocities allow the projectile to travel further. This helps in understanding how objects like balls, bullets, or rockets behave when launched at different speeds and angles. \ud83d\ude80 import numpy as np import matplotlib.pyplot as plt def projectile_range_multi_v0(v0_list, g=9.81): angles = np.linspace(0, 90, 100) angles_rad = np.radians(angles) plt.figure(figsize=(8, 5)) for v0 in v0_list: ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.plot(angles, ranges, label=f'v\u2080 = {v0} m/s') max_range = (v0**2 * np.sin(np.radians(90))) / g plt.plot(45, max_range, 'o') # Nokta koy plt.annotate(f'{max_range:.1f} m', xy=(45, max_range), xytext=(45, max_range + 2), fontsize=8) plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle for Different v\u2080\") plt.legend() plt.grid(True) plt.tight_layout() plt.show() projectile_range_multi_v0([10, 20, 30, 40]) Figure 2: Horizontal range vs. launch angle for different initial velocities. Higher v\u2080 increases the range, and the maximum always occurs at 45\u00b0. Explanation of the Graph This graph shows how the horizontal range of a projectile changes with the launch angle for different gravitational accelerations ( \\(g\\) ). Each curve represents a different gravitational environment: Earth ( \\(g = 9.81 \\, \\text{m/s}^2\\) ), Moon ( \\(g = 1.62 \\, \\text{m/s}^2\\) ), and Jupiter ( \\(g = 24.79 \\, \\text{m/s}^2\\) ). As gravity decreases (like on the Moon), the range increases for the same initial velocity. On higher gravity bodies (like Jupiter), the range decreases. This graph helps understand how the same projectile behaves differently in various planetary environments. import numpy as np import matplotlib.pyplot as plt def projectile_range_multi_g(v0=20, g_values=[9.81, 1.62, 24.79]): angles = np.linspace(0, 90, 100) angles_rad = np.radians(angles) g_labels = [\"Earth (9.81 m/s\u00b2)\", \"Moon (1.62 m/s\u00b2)\", \"Jupiter (24.79 m/s\u00b2)\"] plt.figure(figsize=(8, 5)) for g, label in zip(g_values, g_labels): ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.plot(angles, ranges, label=label) max_range = (v0**2 * np.sin(np.radians(90))) / g plt.plot(45, max_range, 'o') plt.annotate(f'{max_range:.1f} m', xy=(45, max_range), xytext=(45, max_range + 2), fontsize=8) plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle for Different Gravities\") plt.legend() plt.grid(True) plt.tight_layout() plt.show() projectile_range_multi_g() Figure 3: Horizontal range vs. launch angle under different gravitational accelerations. Lower gravity leads to longer ranges; maximum always at 45\u00b0. Explanation of the Graph This graph demonstrates how the initial height ( \\(y_0\\) ) affects the projectile's motion. Each curve represents a projectile launched from a different height. The higher the starting point, the longer the projectile stays in the air. Longer airtime results in a greater horizontal range . This effect is especially noticeable when launching from elevated positions (e.g., a cliff, a tower). This concept is useful in real-world scenarios like launching missiles from elevated platforms or analyzing sports trajectories like basketball shots from different angles. \ud83c\udfc0 import numpy as np import matplotlib.pyplot as plt def trajectory(v0, angle_deg, y0=0, g=9.81): angle_rad = np.radians(angle_deg) vy0 = v0 * np.sin(angle_rad) t_flight = (vy0 + np.sqrt(vy0**2 + 2 * g * y0)) / g t = np.linspace(0, t_flight, 500) x = v0 * np.cos(angle_rad) * t y = y0 + vy0 * t - 0.5 * g * t**2 return x, y v0 = 25 angle = 45 heights = [0, 10, 50] plt.figure(figsize=(10, 6)) for h in heights: x, y = trajectory(v0, angle, y0=h) plt.plot(x, y, label=f'Initial height = {h} m') plt.title(\"Projectile Motion from Different Heights (v\u2080 = 25 m/s, \u03b8 = 45\u00b0)\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Height (m)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() Figure 4: Trajectories of projectiles launched from different heights (0 m, 10 m, 50 m) at 45\u00b0 and 25 m/s. Explanation of the Graph This graph compares projectile motion with and without air resistance . The red curve shows the ideal case (no air resistance). The blue dashed curve includes air resistance. With air resistance, the projectile does not travel as far and has a flatter arc . The effect of air resistance becomes more noticeable at higher speeds. This comparison is essential in real-world applications like ballistics, sports, and aerospace engineering, where air drag cannot be ignored. \u2708\ufe0f import numpy as np import matplotlib.pyplot as plt def trajectory(v0, angle_deg, y0=0, g=9.81): angle_rad = np.radians(angle_deg) vy0 = v0 * np.sin(angle_rad) t_flight = (vy0 + np.sqrt(vy0**2 + 2 * g * y0)) / g t = np.linspace(0, t_flight, 500) x = v0 * np.cos(angle_rad) * t y = y0 + vy0 * t - 0.5 * g * t**2 return x, y def trajectory_with_air_resistance(v0, angle_deg, y0=0, g=9.81, k=0.05, dt=0.01): angle_rad = np.radians(angle_deg) vx = v0 * np.cos(angle_rad) vy = v0 * np.sin(angle_rad) x, y = 0, y0 X, Y = [x], [y] while y >= 0: ax = -k * vx ay = -g - k * vy vx += ax * dt vy += ay * dt x += vx * dt y += vy * dt X.append(x) Y.append(y) return X, Y v0 = 25 angle = 45 x1, y1 = trajectory(v0, angle) x2, y2 = trajectory_with_air_resistance(v0, angle) plt.figure(figsize=(10, 6)) plt.plot(x1, y1, label='No Air Resistance', color='red') plt.plot(x2, y2, '--', label='With Air Resistance', color='blue') plt.title(\"Projectile Motion: With vs. Without Air Resistance (v\u2080 = 25 m/s, \u03b8 = 45\u00b0)\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Height (m)\") plt.legend() plt.grid(True) plt.tight_layout() plt.show() Figure 5: Comparison of trajectories with and without air resistance. \ud83c\udfaf Trajectory Comparison for Different Launch Angles (v\u2080 = 25 m/s) This graph shows how the launch angle affects the trajectory shape and horizontal distance when the initial velocity is fixed at 25 m/s. All projectiles are launched from the same height and speed. Angles used: 15\u00b0, 39\u00b0, 45\u00b0, and 60\u00b0 The longest range is achieved at 45\u00b0 . Higher angles result in higher but shorter trajectories. import numpy as np import matplotlib.pyplot as plt def trajectory(v0, angle_deg, y0=0, g=9.81): angle_rad = np.radians(angle_deg) vy0 = v0 * np.sin(angle_rad) t_flight = (vy0 + np.sqrt(vy0**2 + 2 * g * y0)) / g t = np.linspace(0, t_flight, 500) x = v0 * np.cos(angle_rad) * t y = y0 + vy0 * t - 0.5 * g * t**2 return x, y # Parameters v0 = 25 angles = [15, 39, 45, 60] plt.figure(figsize=(10, 6)) for angle in angles: x, y = trajectory(v0, angle) plt.plot(x, y, label=f'{angle}\u00b0') plt.title(\"Projectile Trajectories at Different Angles (v\u2080 = 25 m/s)\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Height (m)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() Figure 6: Trajectories for different launch angles at fixed speed (v\u2080 = 25 m/s). 5. Frequently Asked Questions (FAQ) 1. At what angle is the maximum range achieved in projectile motion? The maximum range is achieved at 45\u00b0 because, at this angle, the horizontal and vertical components of the velocity are balanced, maximizing distance. 2. How does the initial velocity affect the range? The range increases quadratically (v\u2080\u00b2) as the initial velocity increases, meaning a faster launch gives the projectile more distance to travel. 3. What happens if gravity changes? A higher gravitational acceleration reduces the range because the projectile falls back to the ground more quickly, while a lower gravity increases the range by allowing the projectile to stay in the air longer. 4. Does mass affect the projectile's range? No, in ideal conditions without air resistance, mass does not affect the range because both heavy and light projectiles fall at the same rate under the same conditions. 5. How does air resistance impact projectile motion? Air resistance reduces the range by slowing down the projectile and changing its trajectory, making the optimal launch angle lower than 45\u00b0. \u2705 Checklist: Teacher's Suggestions Implemented Suggestion Status Location in Project 3 different velocities (v\u2080) at same angle, showing range comparison \u2714\ufe0f Done Figure 2 \u2013 projectile_range_multi_v0 3 different planets (different gravity values) with same initial velocity \u2714\ufe0f Done Figure 3 \u2013 projectile_range_multi_g Launching from different heights \u2714\ufe0f Done Figure 4 \u2013 heights = [0, 10, 50] Same speed with different angles (15\u00b0, 39\u00b0, 45\u00b0, 60\u00b0) \u2714\ufe0f Done Figure 6 \u2013 angles = [15, 39, 45, 60] Comparison between with and without air resistance \u2714\ufe0f Done Figure 5 \u2013 trajectory_with_air_resistance()","title":"Problem 1: Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1-investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Problem 1: Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion is a type of two-dimensional motion where an object is launched into the air with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) relative to the horizontal. The motion can be analyzed by breaking it into horizontal (x) and vertical (y) components.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-equations-of-motion","text":"The horizontal and vertical components of the initial velocity are: \\[v_{0x} = v_0 \\cos(\\theta)\\] \\[v_{0y} = v_0 \\sin(\\theta)\\] Using the kinematic equations, the motion in each direction is governed by: Horizontal motion (constant velocity, no acceleration in the ideal case): \\[x = v_{0x} t = v_0 \\cos(\\theta) t\\] Vertical motion (accelerated due to gravity): \\[y = v_{0y} t - \\frac{1}{2} g t^2\\] where: \\(g\\) is the acceleration due to gravity \\((9.81 \\text{ m/s}^2)\\) \\(t\\) is the time of flight.","title":"1.1 Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-time-of-flight","text":"The time of flight is determined by solving for when the projectile returns to the ground \\((y = 0)\\) : \\( \\(t = \\frac{2 v_0 \\sin(\\theta)}{g}\\) \\)","title":"1.2 Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#13-range-equation","text":"The range \\( \\(R\\) \\) is the horizontal distance traveled when the projectile lands: \\( \\(R = v_{0x} \\cdot t = v_0 \\cos(\\theta) \\cdot \\frac{2 v_0 \\sin(\\theta)}{g}\\) \\) Using the identity \\( \\(2 \\sin(\\theta) \\cos(\\theta) = \\sin(2\\theta)\\) \\) , we get: \\( \\(R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\) \\)","title":"1.3 Range Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The range is maximized when \\( \\(\\sin(2\\theta) = 1\\) \\) , which occurs at \\( \\(2\\theta = 90^\\circ\\) \\) , or \\( \\(\\theta = 45^\\circ\\) \\) . If the initial velocity \\( \\(v_0\\) \\) increases, the range increases quadratically. If gravity \\( \\(g\\) \\) increases (e.g., on another planet), the range decreases.","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports: Understanding projectile motion is crucial in games like soccer, basketball, and golf. Engineering: Used in ballistics, rocketry, and artillery targeting systems. Real-World Effects: Air resistance, wind, and uneven terrain can significantly alter the theoretical range.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation-python-simulation","text":"The following Python script simulates projectile motion and plots the range as a function of the angle of projection. import numpy as np import matplotlib.pyplot as plt def projectile_range(v0=20, g=9.81): angles = np.linspace(0, 90, 100) angles_rad = np.radians(angles) ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=f'v\u2080 = {v0} m/s') max_range = (v0**2 * np.sin(np.radians(90))) / g plt.plot(45, max_range, 'ro') plt.annotate(f'Max: {max_range:.1f} m', xy=(45, max_range), xytext=(50, max_range + 5), arrowprops=dict(arrowstyle=\"->\")) plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle (v\u2080 = 20 m/s)\") plt.legend() plt.grid(True) plt.tight_layout() plt.show() projectile_range() Figure 1: Horizontal range vs. launch angle for a projectile with v\u2080 = 20 m/s. Maximum range occurs at 45\u00b0.","title":"4. Implementation: Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#explanation-of-the-graph","text":"This graph illustrates how the horizontal range of a projectile depends on the launch angle for different initial velocities ( \\( v_0 \\) ). Each curve represents a different initial velocity. The maximum range occurs at 45\u00b0 . As the initial velocity increases, the range increases quadratically ( \\( v_0^2 \\) ) . Lower initial velocities result in shorter ranges, while higher velocities allow the projectile to travel further. This helps in understanding how objects like balls, bullets, or rockets behave when launched at different speeds and angles. \ud83d\ude80 import numpy as np import matplotlib.pyplot as plt def projectile_range_multi_v0(v0_list, g=9.81): angles = np.linspace(0, 90, 100) angles_rad = np.radians(angles) plt.figure(figsize=(8, 5)) for v0 in v0_list: ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.plot(angles, ranges, label=f'v\u2080 = {v0} m/s') max_range = (v0**2 * np.sin(np.radians(90))) / g plt.plot(45, max_range, 'o') # Nokta koy plt.annotate(f'{max_range:.1f} m', xy=(45, max_range), xytext=(45, max_range + 2), fontsize=8) plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle for Different v\u2080\") plt.legend() plt.grid(True) plt.tight_layout() plt.show() projectile_range_multi_v0([10, 20, 30, 40]) Figure 2: Horizontal range vs. launch angle for different initial velocities. Higher v\u2080 increases the range, and the maximum always occurs at 45\u00b0.","title":"Explanation of the Graph"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#explanation-of-the-graph_1","text":"This graph shows how the horizontal range of a projectile changes with the launch angle for different gravitational accelerations ( \\(g\\) ). Each curve represents a different gravitational environment: Earth ( \\(g = 9.81 \\, \\text{m/s}^2\\) ), Moon ( \\(g = 1.62 \\, \\text{m/s}^2\\) ), and Jupiter ( \\(g = 24.79 \\, \\text{m/s}^2\\) ). As gravity decreases (like on the Moon), the range increases for the same initial velocity. On higher gravity bodies (like Jupiter), the range decreases. This graph helps understand how the same projectile behaves differently in various planetary environments. import numpy as np import matplotlib.pyplot as plt def projectile_range_multi_g(v0=20, g_values=[9.81, 1.62, 24.79]): angles = np.linspace(0, 90, 100) angles_rad = np.radians(angles) g_labels = [\"Earth (9.81 m/s\u00b2)\", \"Moon (1.62 m/s\u00b2)\", \"Jupiter (24.79 m/s\u00b2)\"] plt.figure(figsize=(8, 5)) for g, label in zip(g_values, g_labels): ranges = (v0**2 * np.sin(2 * angles_rad)) / g plt.plot(angles, ranges, label=label) max_range = (v0**2 * np.sin(np.radians(90))) / g plt.plot(45, max_range, 'o') plt.annotate(f'{max_range:.1f} m', xy=(45, max_range), xytext=(45, max_range + 2), fontsize=8) plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Launch Angle for Different Gravities\") plt.legend() plt.grid(True) plt.tight_layout() plt.show() projectile_range_multi_g() Figure 3: Horizontal range vs. launch angle under different gravitational accelerations. Lower gravity leads to longer ranges; maximum always at 45\u00b0.","title":"Explanation of the Graph"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#explanation-of-the-graph_2","text":"This graph demonstrates how the initial height ( \\(y_0\\) ) affects the projectile's motion. Each curve represents a projectile launched from a different height. The higher the starting point, the longer the projectile stays in the air. Longer airtime results in a greater horizontal range . This effect is especially noticeable when launching from elevated positions (e.g., a cliff, a tower). This concept is useful in real-world scenarios like launching missiles from elevated platforms or analyzing sports trajectories like basketball shots from different angles. \ud83c\udfc0 import numpy as np import matplotlib.pyplot as plt def trajectory(v0, angle_deg, y0=0, g=9.81): angle_rad = np.radians(angle_deg) vy0 = v0 * np.sin(angle_rad) t_flight = (vy0 + np.sqrt(vy0**2 + 2 * g * y0)) / g t = np.linspace(0, t_flight, 500) x = v0 * np.cos(angle_rad) * t y = y0 + vy0 * t - 0.5 * g * t**2 return x, y v0 = 25 angle = 45 heights = [0, 10, 50] plt.figure(figsize=(10, 6)) for h in heights: x, y = trajectory(v0, angle, y0=h) plt.plot(x, y, label=f'Initial height = {h} m') plt.title(\"Projectile Motion from Different Heights (v\u2080 = 25 m/s, \u03b8 = 45\u00b0)\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Height (m)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() Figure 4: Trajectories of projectiles launched from different heights (0 m, 10 m, 50 m) at 45\u00b0 and 25 m/s.","title":"Explanation of the Graph"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#explanation-of-the-graph_3","text":"This graph compares projectile motion with and without air resistance . The red curve shows the ideal case (no air resistance). The blue dashed curve includes air resistance. With air resistance, the projectile does not travel as far and has a flatter arc . The effect of air resistance becomes more noticeable at higher speeds. This comparison is essential in real-world applications like ballistics, sports, and aerospace engineering, where air drag cannot be ignored. \u2708\ufe0f import numpy as np import matplotlib.pyplot as plt def trajectory(v0, angle_deg, y0=0, g=9.81): angle_rad = np.radians(angle_deg) vy0 = v0 * np.sin(angle_rad) t_flight = (vy0 + np.sqrt(vy0**2 + 2 * g * y0)) / g t = np.linspace(0, t_flight, 500) x = v0 * np.cos(angle_rad) * t y = y0 + vy0 * t - 0.5 * g * t**2 return x, y def trajectory_with_air_resistance(v0, angle_deg, y0=0, g=9.81, k=0.05, dt=0.01): angle_rad = np.radians(angle_deg) vx = v0 * np.cos(angle_rad) vy = v0 * np.sin(angle_rad) x, y = 0, y0 X, Y = [x], [y] while y >= 0: ax = -k * vx ay = -g - k * vy vx += ax * dt vy += ay * dt x += vx * dt y += vy * dt X.append(x) Y.append(y) return X, Y v0 = 25 angle = 45 x1, y1 = trajectory(v0, angle) x2, y2 = trajectory_with_air_resistance(v0, angle) plt.figure(figsize=(10, 6)) plt.plot(x1, y1, label='No Air Resistance', color='red') plt.plot(x2, y2, '--', label='With Air Resistance', color='blue') plt.title(\"Projectile Motion: With vs. Without Air Resistance (v\u2080 = 25 m/s, \u03b8 = 45\u00b0)\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Height (m)\") plt.legend() plt.grid(True) plt.tight_layout() plt.show() Figure 5: Comparison of trajectories with and without air resistance.","title":"Explanation of the Graph"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#trajectory-comparison-for-different-launch-angles-v0-25-ms","text":"This graph shows how the launch angle affects the trajectory shape and horizontal distance when the initial velocity is fixed at 25 m/s. All projectiles are launched from the same height and speed. Angles used: 15\u00b0, 39\u00b0, 45\u00b0, and 60\u00b0 The longest range is achieved at 45\u00b0 . Higher angles result in higher but shorter trajectories. import numpy as np import matplotlib.pyplot as plt def trajectory(v0, angle_deg, y0=0, g=9.81): angle_rad = np.radians(angle_deg) vy0 = v0 * np.sin(angle_rad) t_flight = (vy0 + np.sqrt(vy0**2 + 2 * g * y0)) / g t = np.linspace(0, t_flight, 500) x = v0 * np.cos(angle_rad) * t y = y0 + vy0 * t - 0.5 * g * t**2 return x, y # Parameters v0 = 25 angles = [15, 39, 45, 60] plt.figure(figsize=(10, 6)) for angle in angles: x, y = trajectory(v0, angle) plt.plot(x, y, label=f'{angle}\u00b0') plt.title(\"Projectile Trajectories at Different Angles (v\u2080 = 25 m/s)\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Height (m)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() Figure 6: Trajectories for different launch angles at fixed speed (v\u2080 = 25 m/s).","title":"\ud83c\udfaf Trajectory Comparison for Different Launch Angles (v\u2080 = 25 m/s)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-frequently-asked-questions-faq","text":"","title":"5. Frequently Asked Questions (FAQ)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-at-what-angle-is-the-maximum-range-achieved-in-projectile-motion","text":"The maximum range is achieved at 45\u00b0 because, at this angle, the horizontal and vertical components of the velocity are balanced, maximizing distance.","title":"1. At what angle is the maximum range achieved in projectile motion?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-how-does-the-initial-velocity-affect-the-range","text":"The range increases quadratically (v\u2080\u00b2) as the initial velocity increases, meaning a faster launch gives the projectile more distance to travel.","title":"2. How does the initial velocity affect the range?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-what-happens-if-gravity-changes","text":"A higher gravitational acceleration reduces the range because the projectile falls back to the ground more quickly, while a lower gravity increases the range by allowing the projectile to stay in the air longer.","title":"3. What happens if gravity changes?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-does-mass-affect-the-projectiles-range","text":"No, in ideal conditions without air resistance, mass does not affect the range because both heavy and light projectiles fall at the same rate under the same conditions.","title":"4. Does mass affect the projectile's range?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-how-does-air-resistance-impact-projectile-motion","text":"Air resistance reduces the range by slowing down the projectile and changing its trajectory, making the optimal launch angle lower than 45\u00b0.","title":"5. How does air resistance impact projectile motion?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#checklist-teachers-suggestions-implemented","text":"Suggestion Status Location in Project 3 different velocities (v\u2080) at same angle, showing range comparison \u2714\ufe0f Done Figure 2 \u2013 projectile_range_multi_v0 3 different planets (different gravity values) with same initial velocity \u2714\ufe0f Done Figure 3 \u2013 projectile_range_multi_g Launching from different heights \u2714\ufe0f Done Figure 4 \u2013 heights = [0, 10, 50] Same speed with different angles (15\u00b0, 39\u00b0, 45\u00b0, 60\u00b0) \u2714\ufe0f Done Figure 6 \u2013 angles = [15, 39, 45, 60] Comparison between with and without air resistance \u2714\ufe0f Done Figure 5 \u2013 trajectory_with_air_resistance()","title":"\u2705 Checklist: Teacher's Suggestions Implemented"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Investigating the Dynamics of a Forced Damped Pendulum Motivation The forced damped pendulum is an excellent example of a nonlinear dynamical system that exhibits a wide range of behaviors\u2014from periodic motion to chaos. Understanding such systems can help explain real-world phenomena, such as how structures respond to external forces or how energy can be harvested from vibrations. 1. Theoretical Foundation The equation of motion for a forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = A \\cos(\\omega t) \\] Where: - \\(\\theta\\) is the angle, - \\(\\gamma\\) is the damping coefficient, - \\(\\omega_0\\) is the natural frequency, - \\(A\\) is the driving force amplitude, - \\(\\omega\\) is the driving frequency. For small angles ( \\(\\theta \\approx \\sin\\theta\\) ): \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] This becomes a linear second-order differential equation. 2. Analysis of Dynamics We will explore how varying \\(\\gamma\\) , \\(A\\) , and \\(\\omega\\) affects the system. 3. Python Implementation import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Equation of motion def pendulum(t, y, gamma, omega0, A, omega): theta, omega_theta = y dydt = [omega_theta, -gamma * omega_theta - omega0**2 * np.sin(theta) + A * np.cos(omega * t)] return dydt # Simulation parameters gamma = 0.2 # damping omega0 = 1.5 # natural frequency A = 1.2 # driving force amplitude omega_drive = 2.0 # driving frequency y0 = [0.1, 0.0] # initial conditions t_span = (0, 50) t_eval = np.linspace(t_span[0], t_span[1], 5000) # Solve the ODE sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval, args=(gamma, omega0, A, omega_drive)) # Plot the results plt.figure(figsize=(10, 4)) plt.plot(sol.t, sol.y[0]) plt.title('Forced Damped Pendulum Motion') plt.xlabel('Time (s)') plt.ylabel('Angle (rad)') plt.grid(True) plt.show() 4. Phase Space # Phase space plot plt.figure(figsize=(6, 6)) plt.plot(sol.y[0], sol.y[1], lw=0.5) plt.title('Phase Space') plt.xlabel('Angle (rad)') plt.ylabel('Angular Velocity (rad/s)') plt.grid(True) plt.show() 5. Poincar\u00e9 Section # Take stroboscopic points at every period of the driving force T = 2 * np.pi / omega_drive poincare_times = np.arange(0, t_span[1], T) poincare_points = [] for t_p in poincare_times: idx = np.argmin(np.abs(sol.t - t_p)) poincare_points.append([sol.y[0][idx] % (2*np.pi), sol.y[1][idx]]) poincare_points = np.array(poincare_points) plt.figure(figsize=(6, 6)) plt.scatter(poincare_points[:, 0], poincare_points[:, 1], s=10, color='red') plt.title('Poincar\u00e9 Section') plt.xlabel('Angle mod $2\\pi$') plt.ylabel('Angular Velocity') plt.grid(True) plt.show() 6. Interpretation and Discussion Resonance At certain driving frequencies, the system can resonate, leading to large amplitude oscillations. This is critical in engineering as it can cause systems to fail. Chaos As the driving amplitude increases, or damping is reduced, the system can behave chaotically, showing extreme sensitivity to initial conditions. 7. Applications Energy Harvesting : Using pendulum-like systems to convert vibration into electrical energy. Suspension Bridges : Understanding resonance is essential to prevent collapse (e.g., Tacoma Narrows Bridge). Oscillating Circuits : Analogy with RLC circuits under AC driving forces. 8. Limitations and Extensions Nonlinear damping : Real-world damping may not be linear. Non-periodic driving : Real forces can be irregular. 3D pendulums : More degrees of freedom introduce richer behavior. This notebook offers a blend of theoretical, numerical, and graphical analysis, providing an accessible but thorough exploration of the forced damped pendulum system.","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#motivation","text":"The forced damped pendulum is an excellent example of a nonlinear dynamical system that exhibits a wide range of behaviors\u2014from periodic motion to chaos. Understanding such systems can help explain real-world phenomena, such as how structures respond to external forces or how energy can be harvested from vibrations.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The equation of motion for a forced damped pendulum is: \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\sin\\theta = A \\cos(\\omega t) \\] Where: - \\(\\theta\\) is the angle, - \\(\\gamma\\) is the damping coefficient, - \\(\\omega_0\\) is the natural frequency, - \\(A\\) is the driving force amplitude, - \\(\\omega\\) is the driving frequency. For small angles ( \\(\\theta \\approx \\sin\\theta\\) ): \\[ \\frac{d^2\\theta}{dt^2} + \\gamma \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) \\] This becomes a linear second-order differential equation.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"We will explore how varying \\(\\gamma\\) , \\(A\\) , and \\(\\omega\\) affects the system.","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-python-implementation","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Equation of motion def pendulum(t, y, gamma, omega0, A, omega): theta, omega_theta = y dydt = [omega_theta, -gamma * omega_theta - omega0**2 * np.sin(theta) + A * np.cos(omega * t)] return dydt # Simulation parameters gamma = 0.2 # damping omega0 = 1.5 # natural frequency A = 1.2 # driving force amplitude omega_drive = 2.0 # driving frequency y0 = [0.1, 0.0] # initial conditions t_span = (0, 50) t_eval = np.linspace(t_span[0], t_span[1], 5000) # Solve the ODE sol = solve_ivp(pendulum, t_span, y0, t_eval=t_eval, args=(gamma, omega0, A, omega_drive)) # Plot the results plt.figure(figsize=(10, 4)) plt.plot(sol.t, sol.y[0]) plt.title('Forced Damped Pendulum Motion') plt.xlabel('Time (s)') plt.ylabel('Angle (rad)') plt.grid(True) plt.show()","title":"3. Python Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-phase-space","text":"# Phase space plot plt.figure(figsize=(6, 6)) plt.plot(sol.y[0], sol.y[1], lw=0.5) plt.title('Phase Space') plt.xlabel('Angle (rad)') plt.ylabel('Angular Velocity (rad/s)') plt.grid(True) plt.show()","title":"4. Phase Space"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-poincare-section","text":"# Take stroboscopic points at every period of the driving force T = 2 * np.pi / omega_drive poincare_times = np.arange(0, t_span[1], T) poincare_points = [] for t_p in poincare_times: idx = np.argmin(np.abs(sol.t - t_p)) poincare_points.append([sol.y[0][idx] % (2*np.pi), sol.y[1][idx]]) poincare_points = np.array(poincare_points) plt.figure(figsize=(6, 6)) plt.scatter(poincare_points[:, 0], poincare_points[:, 1], s=10, color='red') plt.title('Poincar\u00e9 Section') plt.xlabel('Angle mod $2\\pi$') plt.ylabel('Angular Velocity') plt.grid(True) plt.show()","title":"5. Poincar\u00e9 Section"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#6-interpretation-and-discussion","text":"","title":"6. Interpretation and Discussion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance","text":"At certain driving frequencies, the system can resonate, leading to large amplitude oscillations. This is critical in engineering as it can cause systems to fail.","title":"Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#chaos","text":"As the driving amplitude increases, or damping is reduced, the system can behave chaotically, showing extreme sensitivity to initial conditions.","title":"Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#7-applications","text":"Energy Harvesting : Using pendulum-like systems to convert vibration into electrical energy. Suspension Bridges : Understanding resonance is essential to prevent collapse (e.g., Tacoma Narrows Bridge). Oscillating Circuits : Analogy with RLC circuits under AC driving forces.","title":"7. Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#8-limitations-and-extensions","text":"Nonlinear damping : Real-world damping may not be linear. Non-periodic driving : Real forces can be irregular. 3D pendulums : More degrees of freedom introduce richer behavior. This notebook offers a blend of theoretical, numerical, and graphical analysis, providing an accessible but thorough exploration of the forced damped pendulum system.","title":"8. Limitations and Extensions"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1 solution is ....","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"solution is ....","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}